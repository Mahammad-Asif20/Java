Java Features:
   1. Simple and Easy to Learn
       Java has a clean syntax similar to C++ but avoids complex features like pointers.
   2. Object-Oriented
       Everything in Java is based on objects and classes.
       Supports Encapsulation, Inheritance, Polymorphism, and Abstraction.
   3.Platform-Independent (Write Once, Run Anywhere - WORA)
       Java code is compiled into bytecode, which runs on any system with a Java Virtual Machine (JVM).
       Example: A Java program written on Windows can run on Linux or Mac without modification.
   4.Secure
       No direct memory access (No pointers) → Reduces security risks.
       Bytecode verification ensures safe execution.
       Security Manager restricts access to system resources.
   5.Robust (Strong & Error-Free)
       Automatic Memory Management (Garbage Collection) → Prevents memory leaks.
       Exception Handling → Prevents program crashes.
       Strong Type Checking → Detects errors at compile time.
---------------
Variables:
      A variable in Java is a container that stores data values. 
      It has a data type and a name to identify it.

Declaring a variable:
     datatype variableName = value;

example:
     int age = 25;  // Integer variable
     double price = 99.99; // Decimal variable
     String name = "Asif"; // String variable

Types of Variables:
     1]Instance Variables.
     2]Local Variables.
     3]Static Variables.

1]Instance Variables:
   * Declared inside a class but outside any method.
   * Each object gets its own copy of the variable.
   * Initialized with default values (0, null, false).

2]Local Variables:
   * Declared inside a method, constructor, or block.
   * Only accessible within that block.
   * Not initialized automatically (must assign a value).

3]Static Variables:
   * Declared with the static keyword.
   * Shared among all instances of the class.
   * Stored in class memory (not object memory).

-----------------
OPERATORS:
   Operators in Java are symbols that perform operations on variables and values.

Types of Operators in Java:
   * Arithmetic Operators - Perform mathematical operations.
   * Relational(Comparison) Operators - Compare values and return Boolean.
   * Logical Operators	Combine Boolean expressions.	
   * Bitwise Operators	Perform bitwise operations.	
   * Assignment Operators - Assign values to variables.	
   * Unary Operators - Work on a single operand.	
   * Ternary Operator - Shorter if-else condition.

---------------------
DATA TYPES:
  * Data types define the type of value a variable can hold. 
  * Java is a strongly typed language, so every variable must be declared with a data type.


Types of Data Types in Java:

1]Primitive Data Type.
2]Non-Primitive Data Type.

1]Primitive Data Types:
    Data Type		Example
    byte		byte a = 100;
    short		short b = 1000;
    int		        int c = 50000;
    long		long d = 100000000L;
    float		float e = 10.5f;
    double		double f = 99.99;
    char		char g = 'A';
    boolean		boolean h = true;

2]Non-Primitive Data Types:
    * String → Sequence of characters.
        example: String name="Asif";

    * Array → Collection of similar types.
        example: int a[]={1,2,3,4,5,6};

    * Class → Blueprint for objects.

    * Interface → Contract for classes.

----------------------
Control Statements:
     Control statements are used to control the flow of execution in a Java program.

Conditional (Decision-Making) Statements:
     *Used to execute code based on conditions.
   
 1]if Statements:
     int age = 20;
       if (age >= 18) {
       System.out.println("You are an adult.");
     }

 2]if-else Statements:
      int marks = 40;
      if (marks >= 50) {
          System.out.println("Pass");
        }     
      else {
          System.out.println("Fail");
      }
  
  3]if-else-if Statemens:
      int marks = 75;
      if (marks >= 90) {
          System.out.println("Grade A");
        } 
      else if (marks >= 75) {
          System.out.println("Grade B");
        } 
      else {
         System.out.println("Grade C");
       }

Loops in Java:
    1]for Loop:
        *Used when the number of iterations is known.

    2]while Loop
        *Used when the number of iterations is not known in advance.
    3]do-while Loop
        *Executes at least once, then checks condition.

Jump Statements
   1]break	
       *Exit loop or switch.
   2]continue	
       *Skip current iteration.
   3]return	
       *Exit from method.

        



























